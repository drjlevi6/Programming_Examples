%!PS% srpinski.ps: Program to produce Sierpinski curves C0, C1, C2...% J. Levi 4/2000%% Problem:  User  must alter program to set levels of curves to be drawn.% ------------------------Procedures and variables:--------------------------/x0 54 def					% bottom-left corner of box/y0 250 def					% where curve will be drawn/scalefac 64 def/boxsize {scalefac 8 mul} def%*********************************************************/leveltodraw 1 def		% USER MUST SET: 0, 1, 2, 3...%*********************************************************/scatdict 3 dict def/scat {	% ---- concatenate 2 strings. Stack: strings 1, 2 -> string 3 ----	scatdict begin				% (all of this could apply to arrays, too(?))	/s1 3 -1 roll def			% save strings 1, 2 in temp dict	/s2 exch def	s1 length s2 length add	% create string w/ length of strings 1 & 2	/s3 exch string def	s3 0 s1						% put s1 into s3	dup length 4 1 roll	putinterval	s3 exch s2 putinterval	% put s2 into s3 (the end result)	s3								% place result on stack	end} def/calcturningpoints {	% the heart of the program: algorithm to							% build string of 0's and 1's which will determine							% drawing sequence; string saved as /turnstring.							%							% Actions for 0's and 1's are:							% 0: turn 180 degrees and complete a "leaf", i.e.							%							%			/\__/    \               /\__/\							%			\                 /      \    /							%			 |     +    +    |    ->  |  |							%			/              __ \      / __ \							%					        /  \/       /  \/							%							% 1: turn 90 degrees; draw 1 edge (out of 4) of a "node"							%  plus another "half-leaf" (or half of another node),							%  i.e.							%							%	          \                 \							%	           |  <-half-leaf->  |							%	          / __              / __ \__/  <---- \							%	          \/  \             \/  \    /        | (rest							%	       |          edge of node-> |  |   <---  | of							%	/\__/ +  +      ->          /\__/ __ \        | node)							%	\                           \    /  \  <---- /							%	 |            <-half-leaf->  |							%	/                           /							%	leveltodraw 0 eq {		/bnext (0) def	}{		/anext (1) def		/bnext (0) def		leveltodraw {			/aprev anext def		% (.1) ("." = 0's & 1's already computed)			/bprev bnext def		% (.0)			/bnext aprev bprev				scat dup scat def	% (.1)(.0)(.1)(.0)			/anext bnext chop				(1) scat def		% (.1)(.0)(.1)(.1)		} repeat	} ifelse	/turnstring bnext dup scat chop def} def/calcxyinc {	% -- set xyinc, variable giving "move" segment length --	scalefac	leveltodraw 0 gt {		leveltodraw {2 div} repeat	} if	/xyinc exch def} def/chop { % -- remove last item from string/array on stack (thanks Perl) --	dup length 0 gt {				% do nothing if string/array is null		dup length 1 sub		0 exch getinterval	} if} def/debugsegs {	% draw small segments to show starts/ends of half-leaves:					% meant mainly for debugging.	-4 4 rlineto	4 -4 rlineto} def/drawbox {	% ---------- draw box enclosing curve --------=--------	0 0 moveto	boxsize 0 rlineto	0 boxsize rlineto	boxsize neg 0 rlineto	closepath stroke} def/drawgrid	{	% --------- draw  8x8 grid pattern ----------------	1 1 7 {		scalefac mul dup 		0 moveto		0 boxsize rlineto		0 exch moveto		boxsize 0 rlineto	} for	stroke} def/drawhalfleaf {	xyinc xyinc rlineto	0 xyinc 2 mul rlineto	xyinc neg xyinc rlineto	xyinc xyinc rlineto	xyinc xyinc neg rlineto	xyinc 2 mul 0 rlineto	xyinc xyinc rlineto} def/drawlegend {	% ---- draw legend under curve showing its level -----	gsave	1 setlinewidth	/Helvetica findfont 12 scalefont setfont	256 -13 moveto	(C) show	leveltodraw 2 string cvs show	grestore} def% --------------------------- main program --------------------------0.25 setlinewidthx0 y0 translatedrawbox drawgrid drawlegend calcxyinc calcturningpointsxyinc xyinc 2 mul moveto drawhalfleafturnstring {	49 eq	{					% ("1": the char is passed as an int)		%debugsegs			% (uncomment as desired)		0 xyinc 2 mul rlineto		currentpoint translate 90 rotate	}{		%debugsegs			% (uncomment as desired)		xyinc xyinc neg rlineto		currentpoint translate 180 rotate	} ifelse	drawhalfleaf} forallclosepath stroke showpage