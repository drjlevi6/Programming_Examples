% StarOfDavid.ps-- draws a star of David consisting of two interlocking  % triangles. Thickness, length of triangles' edges and orientation % (clockwise vs. counterclockwise) may be set by the user by changing % the floating variables largeSide and smallSide and the Boolean % variable counterclockwise. %% Schematically, the triangle is constructed as follows: a triangle is% drawn, a second triangle is drawn over the first, rotated 60 degrees:%%         /\%        /  \%       /    \% -----/------\-----% \   /        \   /%  \ /          \ /%   /            \%  / \          / \% /   \        /   \% ------------------%       \    /%        \  /%         \/%% The interlocking is accomplished by first creating a "clip region"% consisting of circular regions covering three of the six areas% where the two triangles intersect. Two clip regions are possible:%%         /\                                   /\              %                                                              %    /--\                                         /--\         % -  |-/|     \-   -                   -   -/     |\-|  -      % \  \--/         /                    \          \--/  /      %  \            /-\                     /-\            /    %   /           |\|         or          |/|           \       %               \-/                     \-/                 % /  /--\          \                   /          /--\  \      % -  |--|-    --   -                   -   -\     |/-|  -      %    \--/    /                                    \--/         %                                                          %         \/                                   \/              %% The portions of the first triangle lying inside the selected region% are redrawn. Depending on which region is chosen, the resulting% star of David will appear to have a "clockwise" (left-handed) or% "counter-clockwise" (right-handed) appearance:%         %         /\                                   /\              %        /  \                                 /  \             %    /--\    \                               /    /--\         % ---|--|-----\-----                   -----/-----|--|---      % \  \--/      \   /                   \   /      \--/  /      %  \ /          /-\                     /-\          \ /    %   /           |/|         or          |\|           \       %  / \          \-/                     \-/          / \    % /  /--\      /   \                   /   \      /--\  \      % ---|-\|-----------                   -----------|/-|---      %    \--/    /                               \    \--/%        \  /                                 \  /          %         \/                                   \/              %*********************************************************************%!PS%Prolog/inch           {72 mul} def/largeSize      7 inch def/smallSizeCoeff 0.7 def/smallSize      {largeSize smallSizeCoeff mul} def/midSize        {largeSize smallSize add 0.5 mul} def/thickLineWidth {largeSize smallSize sub 0.125 mul} def/thinLineWidth  4 def/clipCircRadius {largeSize smallSize sub 0.5 mul} def/sin30          0.5 def/cos30         {3 sqrt 0.5 mul} def/tan30         {sin30 cos30 div} def/leftHanded    false def%/leftHanded    true def     %comment this line out to make star's orientation right-handed/TheTriangles { gsave  largeSize smallSize sub 0.5 mul tan30 mul setlinewidth  1 setgray  midSize Triangle   % white triangle to erase "under-triangle's" interior  thinLineWidth setlinewidth 0 setgray  largeSize Triangle  smallSize Triangle  thickLineWidth setlinewidth 0.4 setgray  midSize Triangle  stroke grestore} def/Triangle {          % stack = side gsave  dup 0.5 mul  1 index 0.5 mul tan30 mul moveto  dup neg 0 rlineto  % draw one side  120 rotate  neg 0 rlineto      % draw 2nd side & eat stack element  closepath          % last side  stroke grestore} def/GetCirclesClip { newpath OneClipCircle 120 rotate OneClipCircle 120 rotate OneClipCircle closepath clip} def/OneClipCircle { midSize 0.3 mul 0 moveto midSize 0.3 mul 0 clipCircRadius 0 360 arc} def4.25 inch 5.5 inch translategsave TheTriangles         % first triangle 60 rotate TheTriangles         % 2nd triangle, completely above firstgrestore                      % Make a clip region consisting of 3 circles which                      % completely contain 3 of the 6 regions where the two triangles                      % intersect. Clip region is chosen to make resulting interlocked triangles                      % "point" clockwise or counterclockwise, depending on whether of not                      % Boolean variable "leftHanded" is set to true or false.leftHanded{ GetCirclesClip }{ 180 rotate GetCirclesClip 180 rotate }ifelsenewpathTheTriangles          % repeat 1st triangle, clipped, to interlock the trianglesshowpage