"""Uses Christopher Bourez's script at

http://christopher5106.github.io/office/2015/12/06/openoffice-\
libreoffice-automate-your-office-tasks-with-python-macros.html

to start the LibreOffice spreadsheet 
"/Users/jonathan/Development/LibreOffice/
Lissajous_Video_Project/Lissajous.ods" listener using python.
JL 20180819

20200301: Solved problem with "model = desktop.getCurrentComponent()"
    by having system sleep 1 second.
20200806: StartLissajousDocWithRunFunction.py: Encapsulates StartLissajousDoc.py
	in a run() function, so that the objects generated by this module
	can be retrieved and manipulated.
"""

import uno, os, time

def await_model(desktop):
    time_waited = 0.0	# total time spent waiting
    sleep_time = 0.1	# time to wait each iteration
    max_tries = 50
    for i in range(max_tries):
        model = desktop.getCurrentComponent()
        if (model != None):
            return model
        else:
            time.sleep(sleep_time)
            time_waited += sleep_time
            print("Awaiting model:", time_waited)
            
    # Failed to retrieve current component if we're here.
    print("desktop.getCurrentComponent(): Failed")

def run():
    """ Explanation of variables returned by run():
    
        localContext:	component context, from PyUNO runtime
                    (required for all documents)
        resolver:	instance of class (service)
        			com.sun.star.bridge.UnoUrlResolver: "provides the
        			ability to access remote processes, resolving
        			them by an UNO url" (OpenOffice Developer's Guide)
        ctx:		"connect to the running office" (Bourez)
        smgr:		ctx's ServiceManager property
        desktop:	central desktop object
        model:		current document (desktop's current component:
        				if need time required for creation, 
        				bring in await_model() above
        current_controller:	document's (model's) current controller
        				(provides access to active sheet)
        active_sheet: 	current_controller's ActiveSheet property
    """
    """ Open LO document:
        Script of LO_launch_script does shell script 
        "/Applications/LibreOffice.app/Contents/MacOS/soffice --calc \
        --accept=\"socket,host=localhost,port=2002;urp;              \
        StarOffice.ServiceManager\""
    """
    
    LO_launch_script = "/Users/jonathan/Library/Scripts/LibreOffice Scripts/" + \
    	"LaunchLissajousSpreadsheetWithListener.scpt" # name changed 20200816
    osa_cmd = "osascript '" + LO_launch_script + "'"
    os.system(osa_cmd)
    os.system("open /Applications/LibreOffice.app")	# Bring LO frontward
    
    # Create objects needed to access the document:
    localContext = uno.getComponentContext()    
    resolver = localContext.ServiceManager.createInstanceWithContext(
    	"com.sun.star.bridge.UnoUrlResolver", localContext)
    ctx = resolver.resolve( "uno:socket,host=localhost,port=2002;urp;" + \
    	"StarOffice.ComponentContext" )
    smgr = ctx.ServiceManager
    desktop = smgr.createInstanceWithContext("com.sun.star.frame.Desktop",ctx)
    
    print("StartLissajousDocWithRunFunction: " + \
        "Sleeping 4 seconds to get model.")
    time.sleep(4)	# Need at least 3 sec to get model
    
    model = desktop.getCurrentComponent()
    
    current_controller = model.CurrentController
    
#   print("StartLissajousDocWithRunFunction: " + \
#       "'ActiveSheet' is in dir(current_controller): ", 
#       ('ActiveSheet' in dir(current_controller)), ":\n",  current_controller.ActiveSheet)
   
#    print("StartLissajousDocWithRunFunction: Sleeping 2 seconds to get " + \
#        "current_controller's active sheet"); time.sleep(2)
    active_sheet = current_controller.ActiveSheet

    """
    # Uncomment the following to print diagnostic information:
    print("\n\n" + "localContext:\t", dir(localContext)[0:1])
    print("resolver:\t", dir(resolver)[0])
    print("ctx:\t", dir(ctx)[0])
    print("smgr:\t", dir(smgr)[0])
    print("desktop:\t", dir(desktop)[0])
    print("model:\t", dir(model)[0])
    print("current_controller:\t", dir(current_controller)[0])
    """

    return[localContext, resolver, smgr, desktop, model, 
    	current_controller, active_sheet]